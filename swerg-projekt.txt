Webscraping basierte Datenextraktion zur applikationsintegrierten Darstellung von Bahnabfahrtstafeln
====================================================================================================


:Author: Ronny Pfannschmidt
:Matrikel: 250154



Problemstellung
---------------

Um ein optimales applikationsintegriertes Benutzungserlebniss
für die Bahntafeln zu bieten,
ist es notwendig die Daten der Bahn aufzubereiten.

.. raw:: pdf

    PageBreak oneColumn

Vorüberlegungen
---------------

Programmiersprache PHP 5.2
    * einfach Integration in die bestehende Applikation
Lokales Caching
    * einfache Verwendung der Daten via Datenbankabfrage
    * wesentlich kürzere Antwortzeiten


Umsetzung
---------

Da die Bahn keine API zur Verfügung stellt,
muss auf Webscraping zurückgegriffen werden
(parsen der Websites die für Endbenutzer gedacht sind).
Die Websites an sich sind fehlerhaft,
was die Verwendung von `html-tidy` notwendig macht.

Das eigentliche Programm ist in 3 Hauptkomponenten geteilt.

Datenbankabstraktion
    stellt Hilfsfunktionen zur Verfügung,
    mit denen man die Datenbank erstellen,
    entfernen und updaten kann.
Scrapper
    stellt Hilfsfunktionen zur Verfügung,
    mit denen man Url's für das Scrapen 
    basierend auf Bahnhof + Zeit generieren kann,
    sowie den eigentlichen Scrapper,
    der aus dem Inhalt einer Bahn-tafel
    der mobilen Bahnwebsite eine Liste
    an Informationsmappings generiert,
    welche leicht an den Datenbank-updater übergeben werden können
Administrationstool
    stellt Funktionen zur Datenbankverwaltung
    sowie für Web-basiertes aktualisieren der Daten zur Verfügung.

.. raw:: pdf

    PageBreak oneColumn

Programmübersicht
------------------


downloader.php
~~~~~~~~~~~~~~

Hilfsfunktionen für Download und Analyse der Website

scan_entry (dom node) -> entry
    Extrahiert ein kompaktes Mapping aus einem Dom Element 
    fuer einen einzelnen Fahrplaneintrag.
    Es enthaelt alle Informationen die Notwendig sind,
    um eine Tabellenspalte zu fuellen (siehe Datenbankschema)
scan_page (content) -> entries
    Führt zuerst eine HTML Bereinigung des Inhaltes durch,
    um anschliessend alle Einträge einer Website
    unter Verwendung von `scan_entry` zu parsen
make_url (station, datetime) -> url
    Generiert eine URL, die für den angegebenen Bahnhof und
    die angegebene Startzeit die Abfahrtstafel für die
    darauffolgend abfahrenden Züge gültig ist
add_timestamps (&item, $key, $basetime)
    Hilfsfunktion welche dazu dient den Zeitstring für einen Eintrag
    in ein Datetime Objekt umzuwandeln und die Datumskorrektur vornimmt
make_listing (content, datetime) -> listing
    Kombiniert scan_page und add_timestamps.
    Zuerst wird das listing generiert,
    dann werden in Jedem eintrag die Datumsangaben ersetzt.


dbtools.php
~~~~~~~~~~~

Hilfsfunktionen für die Verwendung der Datenbank


timestamp_to_datetime (&$item)
    Wandelt die Timestamps eines Datenbankeintrages in ein Datetime objekt
get_current (limit=10, before=5)
    Gibt die nächsten <limit> Abfahrten zurück.
    Die Startzeit berechnet sich aus jetzt() - ($before minuten)
    Es wird immer die Bahnhaltestelle aus der Konfiguation Verwendet
insert_or_update($station, $item)
    Erstellung oder Aktualisierung eines Datenbankeintrages
    zu einer bestimmten Station.

table_printers.php
~~~~~~~~~~~~~~~~~~

Hilfsfunktionen um Tabellarische listings für listen von Einträgen anzuzeigen.
Sie nehmen Listen von Mappings entgeen und verwenden die Keys der Mappings
als Tabellenueberschriften

draw_text_table (table)
    generiert eine Ascii Art Tabelle für das gegebene Listing
draw_html_table (items)
    generiert eine HTML Tabelle für das gegebene Listing

script.php
~~~~~~~~~~

Simples Kommandozeilen/Web Script welches einen aktuellen Bahnplan für Gotha
herunterlädt und als Tabelle darstellt.

.. raw:: pdf

    PageBreak oneColumn

dbadmin.php
~~~~~~~~~~~

Administratives Script für Erstellung, Bereinigung, Aktualisierung
und Darstellung der Datenbank

format_time (&item)
    Hilfsfunktion die den Timestamp eines Eintrages
    in einen Formatierten string umwandelt.
create_db
    erstellt die Datenbanktabelle
clear_db
    entfertnt **ALLE** Einträge in der Datenbanktabelle
kill_db
    entfernt die Datenbanktabelle
sync_db
    aktualisiert die Datenbankeinträge für die eingestellte Haltestelle
    (siehe dbconfig.php)



dbconfig.php
~~~~~~~~~~~~

Optionale Konfigurationsdatei die Datenbankverbindung
und Haltestelle konfiguriert

$db required
    PDO verbinung zur Datenbank
$my_station
    Name oder Nummer der Haltestelle


Aufbau der Datenbank
--------------------


==============  =========== ============
Feld            Typ         Beschreibung
==============  =========== ============
station         VARCHAR(30) Name oder Nummer der Station
target          VARCHAR(30) Ziel des Zuges
planed_arrival  BIGINT      Geplante Ankunft
drift_arrival   BIGINT      Reserviert um später Verspätungen
                            auf Datenbankebene mit Einzubeziehen
train           VARCHAR(30) Zugnummer
line            VARCHAR(30) Gleis
drift           TEXT        Textuelle Beschreibung der Verspätung
canceled        "BOOL"      wenn wahr, dann Ausfall des Zuges
==============  =========== ============


.. raw:: pdf

    PageBreak oneColumn

Beispielufrufe des Scriptes
---------------------------

dbadmin
  ::

    $ php dbadmin.php create # erstellt die datenbank
    $ php dbadmin.php sync # aktualisieren
    $ php dbadmin.php clear # tabelleninhalt entfernen
    $ php dbadmin.php kill # tabelle entfernen

script
  ::

    $ php script.php
    +--------------------+----------------+----------+--------+---------+--+
    | 1) target          | 2) time        | 3) train | 4) li  | 5) dri  | 6) cancele |
    +--------------------+----------------+----------+--------+---------+--+
    | Magdeburg Hbf      | 15.12.11 20:24 | IC 2255  | Gl. 3  | puenktl.|  |
    | Gera Hbf           | 15.12.11 20:28 | RE 3667  | Gl. 1  | puenktl.|  |
    | Eisenach           | 15.12.11 20:33 | RB 16330 | Gl. 2  | puenktl.|  |
    | Leipzig Hbf        | 15.12.11 20:35 | RB 16337 | Gl. 3  | puenktl.|  |
    | Bad Langensalza    | 15.12.11 20:39 | EB 80668 | Gl. 1a | puenktl.|  |
    | Frankfurt(Main)Hbf | 15.12.11 20:46 | ICE 1552 | Gl. 2  | ca. +5  |  |
    | Dresden Hbf        | 15.12.11 21:22 | ICE 1657 | Gl. 3  | ca. +5  |  |
    | Eisenach           | 15.12.11 21:24 | RB 16332 | Gl. 2  | puenktl.|  |
    | Halle(Saale)Hbf    | 15.12.11 21:35 | RB 16339 | Gl. 3  | puenktl.|  |
    | Leinefelde         | 15.12.11 21:39 | RE 3666  | Gl. 1  | puenktl.|  |
    +--------------------+----------------+----------+--------+---------+--+



.. raw:: pdf

    PageBreak oneColumn

Beispielufruf der Api
---------------------

Der einzige Einsprungpunkt der fuer externe Verwendung gedacht ist,
ist `get_current`

::

    $items = get_current(20,3); # holt die 20 naechsten eintraege
                               # die bei now() - 3 minuten beginnen

    draw_html_table(items); # html tabelle ausgeben
